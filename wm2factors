#!/usr/bin/env groovy 

import grapnel.util.*

err = System.err

if (args[0] == "-h"){
	println """
	Splits a results file into various factors.  Optional second parameter specifies the 
	minimum delta majority to accept.  Summary stats to stderr. 
	
	wm2factors all.tab > factors.tab
	wm2factors all.tab 0.1 > factors_0.1.tab
	"""
	System.exit(1)
}

deltaMajorityCutoff = 0.0
if (args.size() > 1){
	deltaMajorityCutoff = args[1] as double
}

println "classAttribute\tfilter\tattributeSelection\tclassifier\tnumAttributes\ttp1\tfp1\ttn1\tfn1\troc"
new OnlineTable(args[0]).eachRow{row->
	filter = parseFilter(row.filter)
	attrSel = parseAttrSel(row.attrEval)
	classifier = parseClassifier(row.classifier)
	
	maj = computeMajorityAcc(row)
	roc = row.roc as double
	delta = roc - maj
    err.println "${row.classAttr}\troc: $roc\tMajority: $maj\tDelta: $delta"
	if (delta < deltaMajorityCutoff) return;
	
	if (roc < 0.45) return;
	
	println "${row.classAttr}\t$filter\t$attrSel\t$classifier\t${row.numAttrs}\t${row.tp1}\t${row.fp1}\t${row.tn1}\t${row.fn1}\t${row.roc}"
}

def computeMajorityAcc(row){        
	tp = row.tp1 as double
	fp = row.fp1 as double
	tn = row.tn1 as double
	fn = row.fn1 as double
		
	samples = tp+fp+tn+fn
	
	pos = tp+fn
	neg = tn+fp
	
	if (pos > neg) fracCorrect = pos/(pos+neg)
	else fracCorrect = neg/(pos+neg)
		
	return(fracCorrect)
}



def parseClassifier(filter){
	modifier =""
	basefilter = ""
	switch(filter){
		case ~/.*Balanced.*/: basefilter="BalancedRandomForest";break;
		case ~/.*trees\.Random.*/: basefilter="RandomForest";break;
		case ~/.*SimpleLogistic.*/: basefilter="Logistic";break;
		case ~/.*SMO.*/: basefilter="SVM";break;		
		default: basefilter=filter;break;
	}		
	
	switch(filter){
		case ~/.*RBF.*/: modifier="RBF Kernel";break;
		case ~/.*PolyKernel.*/: 
		if (filter.contains("E 2.0")) modifier = "Quadratic Kernel"
		if (filter.contains("E 1.0")) modifier = "Linear Kernel"
		break;	
	}
	return("$basefilter $modifier")	
}


def parseAttrSel(filter){
	basefilter = ""
	switch(filter){
		case ~/.*ReliefF.*/: basefilter="ReliefF";break;
		case ~/.*InfoGain.*/: basefilter="InfoGain";break;
		default: basefilter=filter;break;
	}		
	return("$basefilter")	
}



def parseFilter(filter){
	prefilter =""
	basefilter = ""
	switch(filter){
		case ~/.*Exponential.*/: basefilter="ExpNorm";break;
		case ~/.*None.*/: basefilter="None";break;
		case ~/.*Normalize.*/: basefilter="Normalize";break;
		case ~/.*Standardize.*/: basefilter="Standardize";break;	
		default: basefilter=filter;break;
	}		       
        //if(filter == null) return ("null");

	if (filter.contains("log")) prefilter = "log+"	
	return("$prefilter$basefilter")	
}
