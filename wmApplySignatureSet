#!/usr/bin/env groovy

import grapnel.weka.* 
import grapnel.util.*
import weka.core.converters.ConverterUtils.DataSource;
import weka.core.*

err = System.err // sugar
WekaAdditions.enable()
options = ParseOptions(args)

// read in all the signatures for this set
println "INFO: "+options.signatureCfg
signatureCfgFile = new File(options.signatureCfg)
signatureSet = new SignatureSet(signatureCfgFile)

// Read the data (expression, CNV, whatever) 
expressionData = WekaMine.readNumericFromTable(options.data)

/*
  A note about normalization:

  Usually models are built with exponential normalization.  
  This can be done *within* the pipeline, by specifying a filter in the 
  experiment spec, OR it can be done outside the pipeline.  

  In the case of SamplePsychic, rather than look at the .wmm filter 
  variable and apply the filter with each model,  we just exponentially 
  normalize the data in bulk before applying the models.  

  I mention this because it can seem confusing to look at the code because 
  there is this filter that is sometimes used and sometimes not, and that 
  just depends on the context and whether we can assume the data has 
  been normalized first or not. 

  Said another way, generally with whole sets of signatures being applied at 
  once, we normalize in bulk first.  

*/
System.err.print "Normalizing data.."
def normalizedExpressionData = SignatureSet.normalize(expressionData);
System.err.println "done."

def results = signatureSet.applyModels(normalizedExpressionData)

if (options.samplePsychicOutput){
	String jobID,sessionFileName			
	(jobID,sessionFileName) = SessionUtils.generateResultsTokenAndFileName("","samplePsychic_")	
	sessionFileName = options.outputFile+"/"+sessionFileName	
	System.err.print "Saving results to $sessionFileName ..."
	SignatureSet.saveResults(sessionFileName,results)		
	System.err.println "done."
}else{
	print"sampleID\tprForValues\tclassForValues\tnompred\tnullForValues\tmodelName"
	results.each{r->
		println "${r.sampleID}\t${r.prForValues}\t${r.nompred}\t${r.nullForValues}\t${r.modelName}"
	}
}

/****************************************************
* Parse the command line options, checking validity, printing help if needed. 
*/ 
def ParseOptions(args){
	parser = new Parser(description: '''
	
	wmApplySignatureSet takes a directory of signatures and applies all of the signatures to 
	the data.  The output is either a table of results or a results file that can be viewed in 
	SamplePsychic web application. 
	
	Note:  fetal_clusters.cfg must be one directory above a directory named fetal_clusters 
	that contains the actual .wmm signature files. 
	
		 
	Written by: James Durbin (kdurbin@ucsc.edu)

	Example:
	
	wmApplySignatureSet -p -d lusc.tab -o samplePsychic -s fetal_clusters.cfg  


	''');

	parser.with{
		required 'd','data', [description: 'Data file in attribute (row) by samples (col) format.']
		required 's','signatureCfg', [description: '.cfg file for signature set (must be one directory above signature set dir)']
		required 'o','outputFile',[description: 'Output file name to use.  Interpreted as prefix for SamplePsychic output.']	
		flag 'p','samplePsychicOutput',[default:false,description: "Save output as binary SamplePsychic result file."]
	 	flag 'h','help',[default:false,description: 'Print script help.']	
	}
	
	def options
	try{
	  options = parser.parse(args)
		
	}catch(Exception e){
	  System.err << parser.usage
	  System.exit(1)
	}	
	
	return(options)
}