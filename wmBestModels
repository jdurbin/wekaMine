#!/usr/bin/env groovy

import grapnel.util.*
import grapnel.weka.*

err = System.err

// Get the command line options, print help if needed. 
options = ParseOptions(args)

bestPerAttribute = [:]   // bestPerAttribute['survival'] = fields from row. 

bestSpaceEfficient = [:] //  The best "space efficient" classifier.  e.g. not nonlinear SMO. 
maxSpaceEfficient = [:]

minPerAttribute = [:] // minimum roc for given attribute
maxPerAttribute = [:] // maximum roc for given attribute
sumPerAttribute = [:] // sum of roc values for given attribute. 
numPerAttribute = [:]

maxPerModel = [:]
minPerModel = [:]
sumPerModel = [:] // Sum up repetitions of a given model. 

def heading
options.resultFileNames.each{resultsFile->
	//err.print "Reading $resultsFile..."
	t = new OnlineTable(resultsFile)
	
	heading = t.getHeadings().join("\t")		

	t.eachRow{row->	
		baseClassifier = WekaNames.getBaseClassifierType(row.classifier)
		if (baseClassifier == null){
			err.println "NULL classifier? "
			//err.println "classifierIdx: $classifierIdx"
			err.println "${row.classifier}"
			err.println "${row.values()}"
			System.exit(1)
		}
		roc = row.roc as double		
	
	
		if (roc > maxPerAttribute[row.classAttr]){
			maxPerAttribute[row.classAttr] = roc									
			bestPerAttribute[row.classAttr] = row									
		}
	
		// If it's better than the best space efficient classifier and 
		// it's a space efficient classifer, save it...
		if (roc > maxSpaceEfficient[row.classAttr]){
			if (!WekaNames.isNonlinearSMO(row.classifier)){
				maxSpaceEfficient[row.classAttr] = roc									
				bestSpaceEfficient[row.classAttr] = row									
			}
		}
	
		if (minPerAttribute[row.classAttr] == null) minPerAttribute[row.classAttr] = 200;
		if (minPerAttribute[row.classAttr] > roc){
			minPerAttribute[row.classAttr] = roc
		}			
	
		// Sum, for calculating average roc. 	
		if (sumPerAttribute[row.classAttr] == null) sumPerAttribute[row.classAttr] = 0.0
		if (numPerAttribute[row.classAttr] == null) numPerAttribute[row.classAttr] = 0.0
		sumPerAttribute[row.classAttr]+=roc;
		numPerAttribute[row.classAttr]+= 1;  	
	}
	//err.println "done."
}


//err.println maxPerAttribute

if (!options.report){
	// Save something we can build models from...	
	//println t.headings().join("\t")
	println heading 
	bestPerAttribute.each{attribute,rowMap->		
		majorityAcc = computeMajorityAcc(rowMap)					
		roc = rowMap.roc	as double			
		delta = roc-majorityAcc
		if (roc < options.minROC) return; // Don't output this one, below cutoff...
		if (delta < options.minDeltaMajority) return; 
		
		// If we have a space inefficient classifier, check and see 
		// if the best space efficient is good enough...
		if (WekaNames.isNonlinearSMO(rowMap.classifier)){
			spaceEfficient = bestSpaceEfficient[attribute]
			spaceEfficientROC = maxSpaceEfficient[attribute] as double
			delta = roc - spaceEfficientROC;
			if (delta >= options.spacePremium){
				err.println "Space efficient delta: ${delta.round(4)} >= ${options.spacePremium} Using space inefficient classifier."
				println rowMap.values().join("\t")
			}else{
				println spaceEfficient.values().join("\t")
			}
		}else{
			// If it's not a space inefficient classifier accept it unconditionally...
			println rowMap.values().join("\t")
		}
	}
}else{		
	println "attribute\troc\tmajority acc\tdeltaroc\tminroc\tmaxroc\tmeanroc\t${t.headings().join('\t')}"
	err.println "attribute\tmajorityAcc\troc\tdelta"
	// Print a report for inspection...
	bestPerAttribute.each{attribute,rowMap->	
		majorityAcc = computeMajorityAcc(rowMap)					
		roc = rowMap.roc	as double			
		delta = roc-majorityAcc
				
		if (roc < options.minROC) return; // Don't output this one, below cutoff...
		if (delta < options.minDeltaMajority) return; 
		
		err.println "$attribute\t$majorityAcc\t$roc\t$delta"	
		print "$attribute\t$roc\t"
		minroc = minPerAttribute[attribute]
		maxroc = maxPerAttribute[attribute]
		meanroc = sumPerAttribute[attribute]/numPerAttribute[attribute]
		print "$majorityAcc\t$delta\t$minroc\t$maxroc\t$meanroc\t"
		f = rowMap.values().join("\t")
		println "$f"
	}
}

def computeMajorityAcc(row){
	tp = row.tp1 as double
	fp = row.fp1 as double
	tn = row.tn1 as double
	fn = row.fn1 as double
		
	samples = tp+fp+tn+fn
	
	pos = tp+fn
	neg = tn+fp
	
	if (pos > neg) fracCorrect = pos/(pos+neg)
	else fracCorrect = neg/(pos+neg)
		
	return(fracCorrect)
}

/****************************************************
* Parse the command line options, checking validity, printing help if needed. 
*/ 
def ParseOptions(args){
	parser = new Parser(description: '''
	
	wmBestModels 
	
	Returns the top model for each attribute in the given file.  Can alternately output a report on the 
	top models for each attribute.  
	 
	Written by: James Durbin (kdurbin@ucsc.edu)

	Example:
	
	wmBestModels -m 0.60 vijver2002.summary.tab > vijver2002.bestPerAttribute.tab

	''');

	parser.with{
		
		optional 'm','minROC',[default:0,description: 'ROC cutoff for output.  Only results with roc >= minROC will be included.',
		validate:{return it as double}]
		optional 'D','minDeltaMajority',[default:0,description: 'Minimum roc delta from the majority classifier.',
		validate:{return it as double}]
		optional 'S','spacePremium',[default:0,description: "Fraction by which space inefficient classifier's roc must beat best efficient classifier to be accepted. ",
		validate:{return it as double} ]
		
		flag 'r','report',[default:false,description: 'Output a report to stdout instead of another results file. ']		
	    flag 'h','help',[default:false,description: 'Print script help.']
	}

	def options
	try{
	  options = parser.parse(args)
	  options.resultFileNames = parser.remainder
	  
	  if (options.help){
		  System.err << parser.usage
		  System.exit(1)
	  }
	  
	}catch(Exception e){
	  System.err << parser.usage
	  System.exit(1)
	}	
	
	return(options)
}


