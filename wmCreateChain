#!/usr/bin/env groovy

import grapnel.weka.* 
import grapnel.util.*
import weka.core.converters.ConverterUtils.DataSource;
import weka.core.*

import java.lang.management.*

err = System.err // sugar

WekaAdditions.enable()

// Get the command line options, print help if needed. 
options = ParseOptions(args)

// Read the data (expression, CNV, whatever) 
instances = WekaMine.readNumericFromTable(options.data)

// read model list
def modelList = []
if (options.modelList){
	fileContents = new File(options.modelList).text
	modelList = fileContents.split("\n") as ArrayList
}

selfMap = [:]
if (options.selfMap){
	new File(options.selfMap).splitEachLine("\t"){fields->
		tissue = fields[0]
		IDs = fields[1..-1]
		selfMap[tissue] = IDs
	}
}


// Or just read a directory of models...
if (options.modelDir){
		new File(options.modelDir).eachFileMatch(~/.*\.wmm/){modelName->
			fullName = modelName.canonicalPath
			modelList<<fullName
		}
}

printHeapSpace(true)

modelsBySamplesPr0 = new DynamicTable()
modelsBySamplesPr1 = new DynamicTable()
modelsBySamplesN0 = new DynamicTable()
modelsBySamplesN1 = new DynamicTable()
modelsBySamplesAtt = new DynamicTable()

modelList.each{modelName->
	
	
	if (options.rootPath) modelPath = options.rootPath
	else modelPath = ""	
	
	
	err.print "Reading model ${modelName} ..."
	modelPath = "${modelPath}/${modelName}"
	model = (WekaMineModel) weka.core.SerializationHelper.read(modelPath);
	err.println "done."
	
	baseModelName = new File(modelPath).name	// remove path prefix...
	baseModelName = baseModelName.replaceFirst(~/\.[^\.]+$/, '') // remove extension
	
	if ((options.useNullModel) && (model.bnm == null)){
		err.println "ERROR: Attempt to use bootstrap null model, but none found in $modelName"
		System.exit(1)
	}	
	
	// Apply unsupervised filter
	filteredInstances = WekaMine.applyUnsupervisedFilter(instances,model.filter)
	
	// HACK to remove samples used to train model for a specific class.  
	// This should actually be based on the holdout file...
	// AND it shouldn't use the brittle trick of taking the class name from the prefix...
	// This is for one experiment and shouldn't be used generally..
	if (options.selfMap){
		tissueID = model.className.split("_")[0]  // 
		removeList = selfMap[tissueID] as ArrayList
		err.print "Removing ${removeList.size()} self-instances for input data $tissueID..."
		filteredInstances = WekaMine.removeInstances(filteredInstances,removeList)
		err.println "done."
	}

	// Create a new set of instances that match the model set... this may mean removing
	// some attributes that are not in the model and/or adding some that are in the model 
	// but not in the data (set as missing values in this case).   Performance on datasets
	// with different attribute sets will vary with algorithm and problem, but wekaMineClassify
	// will attempt to apply the model to any dataset it is given. 

	// The raw instances will, if nothing else,probably not be attribute selected, so a minimal
	// effect of this will be to reduce the number of attributes significantly down to the 
	// attribute selected subset of the model...

	// The model has no ID, so we save the ID for later reporting...
	instanceIDs = filteredInstances.attributeValues("ID") as ArrayList

	matchedInstances = WekaMine.createInstancesToMatchAttributeList(filteredInstances,model.attributes)

	// Add an empty class attribute so that classifiers don't choke ? Odd...
	matchedInstances = WekaMine.createEmptyClassAttribute(matchedInstances,model.className,model.classValues)
	matchedInstances.setClassName(model.className)
		
	// Model knows everything else needed to process the data... so have at it...
	// Results is a list, one item per instance, each item is a distribution for instance
	// results[0] == model.class0 probability, results[1] == model.class1 probability. 
	ArrayList<Classification>  results = model.classify(matchedInstances)
	
	// KJD should have an option to take the name of the class you want to report...
	// (i.e. brain or not-brain).  Currently just takes first class value.  Also, this is 
	// poorly defined for multi-class distributions. 
	for(instanceIdx in 0..< matchedInstances.numInstances()){
		instanceName = instanceIDs[instanceIdx]		
		class0Pr = results[instanceIdx].prForValues[0]  
		class1Pr = results[instanceIdx].prForValues[1]
		
		// The class names for the two classes...				
		att0 = results[instanceIdx].classValues[0] 
		att1 = results[instanceIdx].classValues[1]
		
		// Get the null model significance for the two probabilities...
		def outStr
		if (options.ignoreNullModel){		
			outStr = "$att0,$att1,${class0Pr.round(7)},${class1Pr.round(7)}"	
		}else{
			null0Pr = model.bnm.getSignificance(class0Pr,0)
			null1Pr = model.bnm.getSignificance(class1Pr,1)		
			outStr = "$att0,$att1,${class0Pr.round(7)},${class1Pr.round(7)},${null0Pr.round(7)},${null1Pr.round(7)}"		
		}
		modelsBySamplesPr0[baseModelName][instanceName] = class0Pr.round(4)
		modelsBySamplesPr1[baseModelName][instanceName] = class1Pr.round(4)
		modelsBySamplesN0[baseModelName][instanceName] = null0Pr.round(4)
		modelsBySamplesN1[baseModelName][instanceName] = null1Pr.round(4)
		modelsBySamplesAtt[baseModelName][instanceName] = "$att0,$att1"
		
		err.println "modelName: $baseModelName  instanceName: $instanceName \t outStr:$outStr"		
	}
}

def prForValues = []
def classNames = []

err.print "Writing ${options.outputFile}.."
modelsBySamplesPr0.write(options.outputFile+"_PR0.tab","\t")
modelsBySamplesPr1.write(options.outputFile+"_PR1.tab","\t")
modelsBySamplesN0.write(options.outputFile+"_N0.tab","\t")
modelsBySamplesN1.write(options.outputFile+"_N1.tab","\t")
modelsBySamplesAtt.write(options.outputFile+"_att.tab","\t")
err.println "done."

/****************************************************
* Parse the command line options, checking validity, printing help if needed. 
*/ 
def ParseOptions(args){
	parser = new Parser(description: '''
	
	wmCreateChain takes a list of models and applies them one at a time to the input data. The result of 
	each classifier output (distForInstance value...) is saved in a model (rows) by samples (cols) table. 
	 
	Written by: James Durbin (kdurbin@ucsc.edu)

	Example:


	''');

	parser.with{
		required 'd','data', [description: 'Data file in attribute (row) by samples (col) format.']
		required 'o','outputFile',[description: 'Output file.']

		optional 'm','modelList',[description: 'A list of model file paths. One of -m or -M required. ']
    	optional 'M','modelDir',[description: 'A directory of model files. Only files with .wmm extension will be considered. One of -m or -M required. ']

		optional 's','selfMap',[description: 'A file contaiing a list of the samples use to train each model to omit samples use to train that model.']

		optional 'p','rootPath',[description: 'Root path appended to beginning of each model name.']

			//flag 'W','writeAll',[description: 'Write both probabilities and bootstrap null probabilities for each value like: pr1,pr2,null1,null2']
	  	  flag 'N','ignoreNullModel',[default:false,description: "Don't use' bootstrap null model"]
	  flag 'h','help',[default:false,description: 'Print script help.']	
	}
	
	def options
	try{
	  options = parser.parse(args)
	
		if (!(options.modelDir || options.modelList)){
			System.err.println "Model files must be specified with either -m or -M."
			System.err<<parser.usage
			System.exit(1)
		}
	
	}catch(Exception e){
	  System.err << parser.usage
	  System.exit(1)
	}	
	
	return(options)
}


static void printHeapSpace(verbose){
	if (!verbose) return;
	
	MemoryMXBean mxmemory = ManagementFactory.getMemoryMXBean();
	MemoryUsage heap = mxmemory.getHeapMemoryUsage();
	System.err.println("\t---- Heap Committed: "+heap.getCommitted()/1000000000.0);
	System.err.println("\t---- Heap Used: "+heap.getUsed()/1000000000.0);
	System.err.println("\t---- Heap Max: "+heap.getMax()/1000000000.0);
}
