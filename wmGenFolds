#!/usr/bin/env groovy

import durbin.weka.* 
import durbin.util.*

import weka.classifiers.meta.FilteredClassifier;
import weka.filters.unsupervised.attribute.RemoveType;
import weka.core.SerializationHelper;
import weka.filters.supervised.attribute.*
import weka.filters.*
import weka.attributeSelection.*
import weka.core.*

WekaAdditions.enable() // Enable meta-class additions to weka API

err = System.err // sugar

// Get the command line options, print help if needed. 
options = ParseOptions(args)
err.println ""

// Expand the configuration file or wekaMine results into a list of experiments.
def experiments = [] 
if (options.config){
	experiments = new WekaMineConfig(options.config,options.clinical)
	params = experiments.params
}else if (options.resultsFile){
	wmr = new WekaMineResults(options.resultsFile)
	experiments = wmr.toExperiments()
	params = [:]
}else if (options.experimentString){	
	headingMap = WekaMineResult.defaultHeadingMap()
	experiment = new ExperimentSpec(options.experimentString,headingMap)
	experiments << experiment
	params = [:]
}else{
	System.err.println "How did we get here?  Must specify one of -c, -R, or -E to define the model. Run with -h for options. "
	System.exit(1)
}

// Read the data (expression, CNV, whatever) and the clinical from tab delimited files
//data = WekaMine.readNumericFromTable(options.data)

def clinical
clinical = WekaMine.readFromTable(options.clinical)

// Read the data (expression, CNV, whatever) and the clinical from tab delimited files
if (options.dataMayContainNominalValues){
	err.println "Reading data with nominal values."
	data = WekaMine.readFromTable(options.data)
}else{
	err.println "Reading numeric data."
	data = WekaMine.readNumericFromTable(options.data)
}

// if holdout requested{
int numFolds = options.numFolds 

def rng = new Random()
if (options.randomSeed){
	rng = new Random(options.randomSeed as int)
}

foldTable = new DynamicTable()
holdoutMap = [:]
holdoutIDs = []
// Perform each experiment described in the experiment spec...
experiments.eachWithIndex{exp,idx-> 
	err.println "--------------------------------"
	err.println "ClassAttr: "+exp.classAttribute
	try{
		
		clinical.setClassName(exp.classAttribute)
		
		err.print "\t"	
		instances = WekaMine.createInstancesFromDataAndClinical(data,clinical,exp.classAttribute)	
		err.println "\tCombined instances: "+instances.numInstances()
	
		err.print "\tRemoving instances with missing class value.  Before: ${instances.numInstances()} "
		instances.deleteWithMissingClass();
		err.println "After: ${instances.numInstances()}"
		
		// Discretize the class attribute... Needed to do stratification...
		err.print "\tDiscretization: "
		(instances,cutoffs) = WekaMine.discretizeClassAttribute(instances,exp.discretization,exp.classAttribute)				

		// Generate holdout
		Instances instancesMinusHoldout				
		if (options.holdoutFraction > 0){
			instances.randomize(rng);
			if (instances.classAttribute().isNominal()) {
	  		instances.stratify(numFolds);
			}
			
			numInst = instances.numInstances()
			holdoutFolds = (double)numInst/(double)(numInst*options.holdoutFraction)
			//err.println "numInst: $numInst  frac: ${options.holdoutFraction}  hfolds: $holdoutFolds"
		
			Instances holdout = instances.testCV(holdoutFolds as int,0)
			holdoutIDs = holdout["ID"]		
		
			holdoutMap[exp.classAttribute] = holdoutIDs // save holdout IDs for this attribute.
		
			instancesMinusHoldout = WekaMine.removeInstances(instances,holdoutIDs)
			err.println "\t${holdoutIDs.size()} holdout samples set aside. ${instancesMinusHoldout.numInstances()} instances remaining for cross-validaion."
		}else{
			instancesMinusHoldout = instances
		}
		
		// Determine if there are enough examples of each class left for the number of folds requested. 
		if (!verifyClassRepresentationForFolds(instancesMinusHoldout,numFolds)) {			
			err.println "SKIPPING: ${exp.classAttribute} in folds file as some class values wouldn't be represented in each fold."
			return;
		}
				
		//err.println "holdoutSamples: $holdoutIDs"
		allIDs = []
		for(repetition in 0..<options.foldRepetitions){
			err.print "\tFold repetition $repetition  "
			attributeFoldName = "${exp.classAttribute}_Rep${repetition}"
			err.println "Saving ${numFolds} folds as $attributeFoldName"
			
			instancesMinusHoldout.randomize(rng);
			if (instancesMinusHoldout.classAttribute().isNominal()) {
		  	instancesMinusHoldout.stratify(numFolds);
			}
		
			if (holdoutIDs.size() > 0){
				holdoutIDs.each{id->
					foldTable[attributeFoldName][id]= 0 // fold 0 is holdout.
				}
			}	
						
			for (int i = 0; i < numFolds; i++) {		
				Instances test = instancesMinusHoldout.testCV(numFolds, i);
				IDs = test["ID"]
				//println "Fold$i: ${IDs}"		
				IDs.each{id->
					//foldTable[exp.classAttribute][id] = i
					foldTable[attributeFoldName][id] = i+1 // (folds are numbered 1 to n) 
				}			
			}
		}
		
		// Write out the attribute selected tab file...
		//pipeline.saveDataFromInstances2(options.outputFile,instances)					
		}catch (Exception e){
			err.println e
		}
}

// Write the foldset file to a file..
foldTable.defaultVal = -1
foldTable.write(options.outputFile,"\t")				

// Print the holdout set for each attribute..
if (holdoutMap.size() > 0){
	holdoutMap.each{k,v->
		print "$k\t"
		println v.join("\t")
	}
}


/****
* Check that there are enough examples of each class that every fold has at least
* one example of each class. 
*/ 
def verifyClassRepresentationForFolds(instances,folds){
	classAttr = instances.classAttribute()
	className = classAttr.name()

	values = instances.attributeValues(className) 
	valSet = values as Set
	
	if (valSet.size() < 2){
		err.println "ERROR:  Less than 2 class values left, can't perform cross validation."
		return(false)
	}
	
	bCountFail = false;
	valSet.each{v->
		vcount = values.count{it == v}	
		err.println "\t$className value $v has $vcount instances."
		if (vcount < folds){
			err.println "ERROR: class value $v has fewer instances than number of folds requested: $folds."
			bCountFail = true;
		}
	}
	
	if (bCountFail == true) return(false)
	else return(true)
}


//============================================================================
// 

/****************************************************
* Parse the command line options, checking validity, printing help if needed. 
*/ 
def ParseOptions(args){
	parser = new Parser(description: '''
	
	Generates a folds file from the given clinical data, data, classAttributes, and discretizations. Saves the 
	folds to the foldsfile and outputs the holdout set, if any, to stdout.  A skeleton .cfg file is needed to describe
	the attributes that will be used in the experiment and the discretization, which is needed to properly 
	stratify the samples.  The data file is needed because a wekaMine experiment will run on the intersection of
	samples between the data and clinical files, so wmGenFolds needs both files to compute that intersection so 
	that it can partition just the subset of samples that will actually be used in the experiment. 	
	
	Note that when there is a holdout, those sample names will be output to stdout AND those samples will be labeled 
	as fold 0 in the output file. 	
	
	Note also that the holdout is fixed across fold repetitions.  So if you have 5 times 5x cross validation folds, the 
	holdout will be the same for all of these.  This means that the 0's in the folds file should be on the same sample for
	any given attribute, while the rest of the numbers should be scrambled. 
	
	Written by: James Durbin (kdurbin@ucsc.edu)

	Example:
	
	wmGenFolds -o folds/folds5x5 -x 5 -f 5 -c cfg/holdout.cfg -H 0.1 -d data/GBM_tumor -i data/GBM.clin > folds/holdout10Pct.tab

	''');

	parser.with{

	  required 'o','outputFile',[description: 'File name for where output.']
	  //required 'd','data', [description: 'Data file in attribute (row) by samples (col) format.']
	  required 'i','clinical', [description: 'Clinical file in attribute (row) by samples (col) format. Required for supervised filters, optional for unsupervised.']
		required 'd','data',[description: 'Data file in attribute (row) by samples (col) format.']
		required 'f','numFolds',[description: 'Number of folds to generate.',validate:{it as int}]

	  optional 'c','config',[description: 'Configuration file']  
		optional 'R','resultsFile',[description: 'Use given wekaMine summary results to build classifier(s). Will save one model per result in file.']		
		optional 'E','experimentString',[description: 'A single experiment string. In single quotes, comma separated: attrEval,attrSearch,numAttributes,none,classAttr,discretization.  Use keyword "none" to omit a field.']
		optional 'x','foldRepetitions',[default:"1",description: 'Number of times to repeat numFolds CV (e.g. 5 for 5x k-fold CV)',
		validate:{it as int}]
		optional 's','randomSeed',[description: 'Seed for random number generator. Default seeds with clock.']
			
		optional 'H','holdoutFraction',[default:0,description: 'Fraction of net samples (intersection of data+clinical) to set aside as holdout.',
		validate:{it as double}]

	  flag 'h','help',[default:false,description: 'Print script help.']
		flag 'N','dataMayContainNominalValues',[default:false,description: 'Option to read datafile in as mixed numeric/nominal.  Data reas is slower than default all numeric. ']		
	}

	def options
	try{
	  options = parser.parse(args)
	
		if ((!options.config && !options.resultsFile && !options.experimentString) || (options.help)){
			System.err.println "Must specify one of -c, -R, or -E to define the model. Run with -h for options. "
			System.err<<parser.usage
			System.exit(1)
		}
	
	}catch(Exception e){
	  System.err << parser.usage
	  System.exit(1)
	}	
	
	return(options)
}
