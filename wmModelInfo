#!/usr/bin/env groovy

import static grapnel.charts.Charts.*;
import grapnel.weka.* 
import grapnel.util.*
import weka.core.converters.ConverterUtils.DataSource;
import weka.core.*
import grapnel.weka.WekaClassifierInfo as WCI

err = System.err // sugar

WekaAdditions.enable()

// Get the command line options, print help if needed. 
options = ParseOptions(args)

options.modelFiles.each{modelFile->
	err.print "Reading model ${modelFile} ..."
	model = (WekaMineModel) weka.core.SerializationHelper.read(modelFile);
	err.println "done."
	
	if (options.attributeWeights){
		// WCI is a newer bit that does more. 
		def feature2weights = WCI.getFeatures(model.classifier)
		println "feature\tweight"
		feature2weights.each{k,v->
			println "$k\t${v.round(4)}"
		}
		return;
	}
	
	// Return a single line synopsis. 
	if (options.shortSummary){		
		def summary = WekaClassifierInfo.getSummary(model.classifier)
		println "$modelFile\t$summary"
		return;
	}
	
	if ((!options.attributeList) && (!options.nullModel) && (!options.nullModelHistogram)){
		println model.toString();
	}
	
	if (options.attributeList){
		println "Model attributes:"
		println model.attributes().join("\n");
		return;
	}
	
	if (options.nullModel){
		bnm = model.bnm
		dynamicbin = bnm.nullDistribution[0]
		values = dynamicbin.elements()			// Not available in quantile bin... 
		elements = values.elements()
		println "Classifier distribution"
		elements.each{
			println it
		}
	}
	
	if (options.nullModelHistogram){
		fields = options.nullModelHistogram.split(";")
		fileName = fields[0]
		chartTitle = fields[1]
		
		System.err.print "Saving null model histogram to $fileName ..."
		
		bnm = model.bnm
		dynamicbin = bnm.nullDistribution[0]
		values = dynamicbin.elements()
		elements = values.elements() as ArrayList
		
		chartTitle = chartTitle.replaceAll(/\\n/,"\n")
			
		histchart = hist(chartTitle,elements)
		saveChart(histchart,fileName)
		System.err.println "done."
	}
}

System.exit(0)

/****************************************************
* Parse the command line options, checking validity, printing help if needed.
*/
def ParseOptions(args){
	parser = new Parser(description: '''

	wmModelInfo reads in a saved wekaMine model file (.wmm) and reports on the information
	contained in the model, such as the classifier, parameters, attributes used, etc.  Default
	output is to print basic information about the model.  The -a option prints out just the list
	of attributes the model uses.

	Written by: James Durbin (kdurbin@ucsc.edu)

	Example:

	wmModelInfo bestmodel.wmm > model.info
	wmModelInfo -s *.wmm > models.info
	wmModelInfo -a bestmodel.wmm > attributeList.txt
	wmModelInfo -n bestmodel.wmm > nullvalues.txt
	wmModelInfo -c "entinostat.png;Entinostat Null Background" bestmodel.wmm

	''');

	parser.with{
		optional 'c','nullModelHistogram',[description: 'Save histogram of null distribution to file. "filename;chart title"']

		flag 's','shortSummary',[description: 'Short single line summary of classifier.']
		flag 'a','attributeList',[default:false,description: 'suppress classifier info and just output attribute list.']
		flag 'w','attributeWeights',[default:false,description: 'suppress classifier info and just output attribute list with weights']
		flag 'n','nullModel',[default:false,description: 'Print out null model values.']
	  flag 'h','help',[default:false,description: 'Print script help.']
	}

	def options
	try{
	  options = parser.parse(args)
	  if (options.help) {System.err<<parser.usage;System.exit(1)}
 	  options.modelFiles = parser.remainder	  	  
	}catch(Exception e){
	  System.err << parser.usage
	  System.exit(1)
	}

	return(options)
}
