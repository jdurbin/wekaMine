#!/usr/bin/env groovy

import grapnel.weka.* 
import grapnel.util.*

import weka.classifiers.meta.FilteredClassifier;
import weka.filters.unsupervised.attribute.RemoveType;
import weka.core.SerializationHelper;
import weka.filters.supervised.attribute.*
import weka.filters.*
import weka.attributeSelection.*
import weka.core.*

import org.apache.commons.io.*

WekaAdditions.enable() // Enable meta-class additions to weka API

err = System.err // sugar

// Get the command line options, print help if needed. 
options = ParseOptions(args)
err.println ""

filter = "weka.filters.supervised.instance.SpreadSubsample -M ${options.ratio} -X ${options.max}"
println "Filter: "+filter

// Read the data (expression, CNV, whatever) and the clinical from tab delimited files
data = WekaMine.readNumericFromTable(options.data)

err.println "DEBUG: data.numInstances() = "+data.numInstances()
err.println data['ID']

def clinical
if (options.clinical){
	clinical = WekaMine.readFromTable(options.clinical)
}

err.println "DEBUG: clinical.numInstances() = "+clinical.numInstances()
//err.println clinical
err.println clinical['ID']


err.println "=================================="

try{		
	// Combines data and single class attribute from clinical into one set of instances...
	// Unsupervised filters don't need clinical data. 
	if (options.clinical){	
		instances = WekaMine.createInstancesFromDataAndClinical(data,clinical,options.classAttribute)	

        System.err.println "DEBUG: instances after createInstances from Data and Clinical for ${options.classAttribute}= "+instances.numInstances()

		// Clean up instances:
		// * remove useless attributes
		// * if not allowed, remove instances with negative class values
		// * remove instances with missing class values	
		instances = WekaMine.cleanUpInstances(instances)
		
		// Discretize the class attribute...
		if (options.discretization){
			instances = WekaMine.discretizeClassAttribute(instances,options.discretization,options.classAttribute)				
		}																				
	}else {
		instances = data
		data.setClassIndex(-1)
	}
	
	filter = "weka.filters.supervised.instance.SpreadSubsample -M ${options.ratio} -X ${options.max}"
	instances = WekaMine.applyUnsupervisedFilterFromName(instances,filter)	
	
	// Write out the attribute selected tab file...	
	def st = new SaveTab();
	st.saveDataFromInstances(options.outputFile,instances)

	// If the filter was supervised, will need also to write out a new meta-data file
	if (options.clinical){
		baseOutput = FilenameUtils.getBaseName(options.outputFile)
		path = FilenameUtils.getPath(options.outputFile)
		clinOutput = "${path}${baseOutput}_class.tab"
		err.print "Saving $clinOutput..."
		SaveTab.saveClinFromInstances(clinOutput,instances)
		err.println "done."
	}		
			
}catch (Exception e){
	e.printStackTrace()
}




//============================================================================
// 

/****************************************************
* Parse the command line options, checking validity, printing help if needed. 
*/ 
def ParseOptions(args){
	parser = new Parser(description: '''
	Modified wmFilter to apply weka.filters.supervised.instance.SpreadSubsample. 
	
	
	Written by: James Durbin (kdurbin@ucsc.edu)

	Example:

		wm

	''');

	parser.with{

	  required 'o','outputFile',[description: 'File name for output.']
	  required 'd','data', [description: 'Data file in attribute (row) by samples (col) format.']
	  required 'i','clinical', [description: 'Metadata file in attribute (row) by samples (col) format.']
	  required 'C','classAttribute',[description: 'Name of class attribute.']
	  
	  optional 'r','ratio',[default: 2,description: 'The maximum class distribution spread (e.g. 2:1 ratio major/minor class)']
	  optional 'M','max',[default:0,description: 'The maximum count for any class value (default 0 = unlimited)']
		
	  flag 'h','help',[default:false,description: 'Print script help.']
	}

	def options
	try{
	  options = parser.parse(args)
	
	  if (options.clinical && !options.classAttribute){		  		  
	  		System.err.println "A supervised filter must specify both a annotation file (-i) and a class attribute (-C)"
	  		System.err<<parser.usage
	  		System.exit(1)
	  }		
	}catch(Exception e){
	  System.err << parser.usage

          args.each{arg->
             System.err.println "ARG: $arg"
          }
	  System.exit(1)
	}	
	
	return(options)
}
